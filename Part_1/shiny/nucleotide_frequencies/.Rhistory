qqnorm(merge_sub$value, main ="QQ")
qqline(merge_sub$value)
View(merge_sub)
shapiro.test(merge_sub$value)
shapiro.test(merge_sub$value[1:2000,])
shapiro.test(merge_sub[1:2000,]$value)
shapiro.test(merge1[1:2000,]$value)
View(merge1)
merge_sub <- subset(merge1,value<-0.1,value>-0.2260529)
merge_sub <- subset(merge1,value<"-0.1",value>"-0.2260529")
View(merge_sub)
shapiro.test(merge_sub[1:2000,]$value)
ggdensity(merge_sub, x ="value",
add = "mean", rug = TRUE,
color = "V2", fill = "V2")+xlim(-0.3,-.1)
ggdensity(merge_sub, x ="value",
add = "mean", rug = TRUE,
color = "V2", fill = "V2")
merge_sub <- subset(merge1,value<"0",value>"-0.2260529")
ggdensity(merge_sub, x ="value",
add = "mean", rug = TRUE,
color = "V2", fill = "V2")
shapiro.test(merge_sub[1:2000,]$value)
BiocManager::install('cellassign')
install.packages("tensorflow")
library(tensorflow)
install_tensorflow(extra_packages = "tensorflow-probability")
install_tensorflow(extra_packages = "tensorflow-probability")
install_tensorflow(extra_packages = "tensorflow-probability")
install_tensorflow(extra_packages = "tensorflow-probability")
library(SingleR)
devtools::install_github('dviraran/SingleR')
library(devtools)
install.packages("devtools")
library(SinleR)
library(devtools)
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
testMarker <- read.delim("Z:/360MoveData/Users/Administrator/Desktop/testMarker.txt", row.names=1)
View(testMarker)
cell_in_cluster <- read.csv("Z:/360MoveData/Users/Administrator/Desktop/cell_in_cluster.txt", sep="")
View(cell_in_cluster)
cell_in_cluster <- read.csv("Z:/360MoveData/Users/Administrator/Desktop/cell_in_cluster.txt", row.names=NULL, sep="")
View(cell_in_cluster)
clust56 <- read.csv("Z:/360MoveData/Users/Administrator/Desktop/clust56.csv", row.names=1)
View(clust56)
load("Z:/360MoveData/Users/Administrator/Desktop/makrers/immgen.rna.rda")
library(iCellR)
load("Z:/360MoveData/Users/Administrator/Desktop/makrers/immgen.rna.rda")
View(immgen.rna)
library(dplyr)
library(reshape2)
library(ampvis2)
library(ggthemes)
library(ggsci)
library(tidyverse)
library(vegan)
library(ggplot2)
library(parallel)
library(ggpubr)
library(phyloseq)
library(ape)
library(MicrobiotaProcess)
library(ggVennDiagram)
BiocManager::install(MicrobiotaProcess)
BiocManager::install(ape)
load("Z:/360MoveData/Users/Administrator/Desktop/R_out/.RData")
k<-ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_super_significance",name,".pdf"),width = 12, height = 12)
print(k)
dev.off()
k<-ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_super_significance",name,".pdf"),width = 12, height = 12)
print(k)
dev.off()
library(DESeq2)
library(clusterProfiler)
library(dplyr)
library(ggrepel)
library(plotly)
library(Cairo)
k<-ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_super_significance",name,".pdf"),width = 12, height = 12)
print(k)
dev.off()
MyTheme <- theme_bw()+
theme(legend.position = "top",panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), legend.text = element_text(size=9,color='#003087'),
plot.title = element_text(size=15,color="#003087"), legend.key =
element_blank(), axis.text = element_text(size=10,color='#003087'),
strip.text = element_text(size=12,color="#EF0808"),
strip.background = element_blank())
k<-ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_super_significance",name,".pdf"),width = 12, height = 12)
print(k)
dev.off()
k<-ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_super_significance",name,".pdf"),width = 12, height = 12)
print(k)
dev.off()
for (i in ls(pattern="Compare")){tryCatch({
name <- i
compare <- unique(get(i))
compare <- subset(coldata,condition==compare[1] | condition==compare[2])
write.table(compare, file = (paste("de_",i,sep="")), quote=FALSE, row.names=TRUE, col.names=TRUE, sep="\t")
dds <- DESeqDataSetFromMatrix(countData=subset(database,select=row.names(compare)), colData=compare, design=~condition)
dds <- DESeq(dds)
res <- results(dds)
table(res$padj <0.05)
res <- res[order(res$padj),]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),by="row.names",sort=FALSE)
write.csv(resdata,file = (paste("res_",i,".csv",sep="")))
resdatajoin <- left_join(resdata, gene_name, by = "Row.names")
resdatajoin <- merge(resdatajoin, eggnog_all_gene, by = "GeneID")
write.csv(resdatajoin,file = (paste("res_",i,"_with_name",".csv",sep="")))
resdatajoin$threshold = as.factor(ifelse(resdatajoin$pvalue < 0.05 & abs(resdatajoin$log2FoldChange) >= 1.5, ifelse(resdatajoin$log2FoldChange> 1.5 ,'Up','Down'),'NoSignifi'))
p <- plot_ly(resdatajoin,x = resdatajoin$log2FoldChange, y = -log10(resdatajoin$pvalue),text = resdatajoin$GeneID, color = resdatajoin$threshold, type = 'scatter',  mode = 'markers')
htmlname <- paste("res_de_volcano",i,"_with_name_plotly.html",sep="")
htmlwidgets::saveWidget(as_widget(p), htmlname)
resdatajoin$threshold = as.factor(ifelse(resdatajoin$pvalue < 0.05 & abs(resdatajoin$log2FoldChange) >= 1.5, ifelse(resdatajoin$log2FoldChange> 1.5 ,'Up','Down'),'NoSignifi'))
k<-ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_super_significance",name,".pdf"),width = 12, height = 12)
print(k)
dev.off()
ran1 <-arrange(resdatajoin, desc(log2FoldChange))[1:5,]
ran2 <-arrange(resdatajoin, log2FoldChange)[1:5,]
sub_ran <- rbind(ran1,ran2)
o <- ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = sub_ran,aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_rank_up_down_top10",name,".pdf"),width = 12, height = 12)
print(o)
dev.off()
resdata <- subset(resdata,abs(resdata$log2FoldChange) > 1 & resdata$pvalue < 0.05)
write.csv(resdata,file = (paste("res_de_",i,".csv",sep="")))
resdatajoin <- left_join(resdata, gene_name, by = "Row.names")
resdatajoin <- merge(resdatajoin, eggnog_all_gene, by = "GeneID")
write.csv(resdatajoin,file = (paste("res_de_",i,"_with_name",".csv",sep="")))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})}
for (i in ls(pattern="Compare")){tryCatch({
name <- i
compare <- unique(get(i))
compare <- subset(coldata,condition==compare[1] | condition==compare[2])
write.table(compare, file = (paste("de_",i,sep="")), quote=FALSE, row.names=TRUE, col.names=TRUE, sep="\t")
dds <- DESeqDataSetFromMatrix(countData=subset(database,select=row.names(compare)), colData=compare, design=~condition)
dds <- DESeq(dds)
res <- results(dds)
table(res$padj <0.05)
res <- res[order(res$padj),]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),by="row.names",sort=FALSE)
write.csv(resdata,file = (paste("res_",i,".csv",sep="")))
resdatajoin <- left_join(resdata, gene_name, by = "Row.names")
resdatajoin <- merge(resdatajoin, eggnog_all_gene, by = "GeneID")
write.csv(resdatajoin,file = (paste("res_",i,"_with_name",".csv",sep="")))
p <- plot_ly(resdatajoin,x = resdatajoin$log2FoldChange, y = -log10(resdatajoin$pvalue),text = resdatajoin$GeneID, color = resdatajoin$threshold, type = 'scatter',  mode = 'markers')
htmlname <- paste("res_de_volcano",i,"_with_name_plotly.html",sep="")
htmlwidgets::saveWidget(as_widget(p), htmlname)
resdatajoin$threshold = as.factor(ifelse(resdatajoin$pvalue < 0.05 & abs(resdatajoin$log2FoldChange) >= 1.5, ifelse(resdatajoin$log2FoldChange> 1.5 ,'Up','Down'),'NoSignifi'))
k<-ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_super_significance",name,".pdf"),width = 12, height = 12)
print(k)
dev.off()
ran1 <-arrange(resdatajoin, desc(log2FoldChange))[1:5,]
ran2 <-arrange(resdatajoin, log2FoldChange)[1:5,]
sub_ran <- rbind(ran1,ran2)
o <- ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = sub_ran,aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_rank_up_down_top10",name,".pdf"),width = 12, height = 12)
print(o)
dev.off()
resdata <- subset(resdata,abs(resdata$log2FoldChange) > 1 & resdata$pvalue < 0.05)
write.csv(resdata,file = (paste("res_de_",i,".csv",sep="")))
resdatajoin <- left_join(resdata, gene_name, by = "Row.names")
resdatajoin <- merge(resdatajoin, eggnog_all_gene, by = "GeneID")
write.csv(resdatajoin,file = (paste("res_de_",i,"_with_name",".csv",sep="")))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})}
MyTheme2 <- theme_bw()+
theme(legend.position = "top",panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), legend.text = element_text(size=9,color='#003087'),
plot.title = element_text(size=15,color="#003087"), legend.key =
element_blank(), axis.text = element_text(size=10,color='#003087'),
strip.text = element_text(size=12,color="#EF0808"),
strip.background = element_blank())
for (i in ls(pattern="Compare")){tryCatch({
name <- i
compare <- unique(get(i))
compare <- subset(coldata,condition==compare[1] | condition==compare[2])
write.table(compare, file = (paste("de_",i,sep="")), quote=FALSE, row.names=TRUE, col.names=TRUE, sep="\t")
dds <- DESeqDataSetFromMatrix(countData=subset(database,select=row.names(compare)), colData=compare, design=~condition)
dds <- DESeq(dds)
res <- results(dds)
table(res$padj <0.05)
res <- res[order(res$padj),]
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)),by="row.names",sort=FALSE)
write.csv(resdata,file = (paste("res_",i,".csv",sep="")))
resdatajoin <- left_join(resdata, gene_name, by = "Row.names")
resdatajoin <- merge(resdatajoin, eggnog_all_gene, by = "GeneID")
write.csv(resdatajoin,file = (paste("res_",i,"_with_name",".csv",sep="")))
p <- plot_ly(resdatajoin,x = resdatajoin$log2FoldChange, y = -log10(resdatajoin$pvalue),text = resdatajoin$GeneID, color = resdatajoin$threshold, type = 'scatter',  mode = 'markers')
htmlname <- paste("res_de_volcano",i,"_with_name_plotly.html",sep="")
htmlwidgets::saveWidget(as_widget(p), htmlname)
resdatajoin$threshold = as.factor(ifelse(resdatajoin$pvalue < 0.05 & abs(resdatajoin$log2FoldChange) >= 1.5, ifelse(resdatajoin$log2FoldChange> 1.5 ,'Up','Down'),'NoSignifi'))
k<-ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_super_significance",name,".pdf"),width = 12, height = 12)
print(k)
dev.off()
ran1 <-arrange(resdatajoin, desc(log2FoldChange))[1:5,]
ran2 <-arrange(resdatajoin, log2FoldChange)[1:5,]
sub_ran <- rbind(ran1,ran2)
o <- ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme2 +
geom_text_repel(data = sub_ran,aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
pdf(paste("Differential_Expression_volcano_by_rank_up_down_top10",name,".pdf"),width = 12, height = 12)
print(o)
dev.off()
resdata <- subset(resdata,abs(resdata$log2FoldChange) > 1 & resdata$pvalue < 0.05)
write.csv(resdata,file = (paste("res_de_",i,".csv",sep="")))
resdatajoin <- left_join(resdata, gene_name, by = "Row.names")
resdatajoin <- merge(resdatajoin, eggnog_all_gene, by = "GeneID")
write.csv(resdatajoin,file = (paste("res_de_",i,"_with_name",".csv",sep="")))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})}
ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme2 +
geom_text_repel(data = sub_ran,aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
resdatajoin$threshold = as.factor(ifelse(resdatajoin$pvalue < 0.05 & abs(resdatajoin$log2FoldChange) >= 1.5, ifelse(resdatajoin$log2FoldChange> 1.5 ,'Up','Down'),'NoSignifi'))
ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=2,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=2,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme2 +
geom_text_repel(data = sub_ran,aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=5,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=5,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
MyTheme <- theme_bw()+
theme(legend.position = c(0.9,0.5),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), legend.text = element_text(size=9,color='#003087'),
plot.title = element_text(size=15,color="#003087"), legend.key =
element_blank(), axis.text = element_text(size=10,color='#003087'),
strip.text = element_text(size=12,color="#EF0808"),
strip.background = element_blank())
ggplot(data = resdatajoin, aes(x = log2FoldChange, y = -log10(pvalue), colour=threshold,label = GeneID)) +
geom_point(alpha=0.4, size=1.75) + scale_color_manual(values=c("#4DBBD5B2", "#8491B4B2","#DC0000B2")) + xlim(c(-11.5, 11.5)) +geom_vline(xintercept=c(-1.5,1.5),lty=3,col="grey",lwd=0.8) +
geom_hline(yintercept = -log10(0.05),lty=3,col="grey",lwd=0.8) + labs(x="log2(fold change)",y="-log10 (p-value)",title="Differential Expression") +
theme_bw() + MyTheme +
geom_text_repel(data = subset(resdatajoin, resdatajoin$pvalue < 0.000001 & abs(resdatajoin$log2FoldChange) >= 5),aes(label = GeneID),size = 3,box.padding = unit(0.5, "lines"),point.padding = unit(0.8, "lines"), segment.color = "grey", show.legend = FALSE )
R.methylation_frequency <- read.delim("Z:/360MoveData/Users/Administrator/Desktop/R.methylation_frequency.tsv")
View(R.methylation_frequency)
Y.methylation_frequency <- read.delim("Z:/360MoveData/Users/Administrator/Desktop/Y.methylation_frequency.tsv")
View(Y.methylation_frequency)
RY <- merge(R.methylation_frequency,Y.methylation_frequency,by = "group_sequence")
View(RY)
m <- RY[,c(1,8,15)]
View(m)
ggplot(data=m, aes(x=m$methylated_frequency.x, y=m$methylated_frequency.y)) + geom_point()
library(ggplot2)
ggplot(data=m, aes(x=m$methylated_frequency.x, y=m$methylated_frequency.y)) + geom_point()
p <- ggplot(data=m, aes(x=m$methylated_frequency.x, y=m$methylated_frequency.y)) + geom_point()
write.csv(m,file = "Z:/360MoveData/Users/Administrator/Desktop/RY.meth.csv
")
write.csv(m,file = "Z:/360MoveData/Users/Administrator/Desktop/RY.meth.csv")
t.test(m$methylated_frequency.x,m$methylated_frequency.y,paried=TRUE)
library(DESeq2)
library(clusterProfiler)
library(dplyr)
library(ggrepel)
library(plotly)
library(Cairo)
rm(list=ls())
set.seed(666)
MyTolor = c("#E64B35B2","#4DBBD5B2","#00A087B2","#3C5488B2","#F39B7FB2","#8491B4B2","#91D1C2B2","#DC0000B2","#7E6148B2")
MyTheme <- theme_bw()+
theme(legend.position = c(0.9,0.5),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), legend.text = element_text(size=9,color='#003087'),
plot.title = element_text(size=15,color="#003087"), legend.key =
element_blank(), axis.text = element_text(size=10,color='#003087'),
strip.text = element_text(size=12,color="#EF0808"),
strip.background = element_blank())
RY.meth <- read.csv("Z:/360MoveData/Users/Administrator/Desktop/RY.meth.csv", row.names=1)
View(RY.meth)
BiocManager::install("daniellyz/MergeION")
source("https://raw.githubusercontent.com/rickhelmus/patRoon/master/install_patRoon.R")
installPatRoon()
library(patRoon)
library(patRoon)
install.packages("rsconnect")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Tabsets"),
sidebarPanel(
radioButtons("dist", "分布类型", list("Normal"="normal", "Uniform" = "unif",
"Log-normal" = "lnorm", "Exponential" = "exp")),
br(),
sliderInput("n","number of observations", min = 1, max = 1000, value = 500)
),
mainPanel(
tabsetPanel(
tabPanel(title = "Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Tabsets"),
sidebarPanel(
radioButtons("dist", "分布类型", list("Normal"="normal", "Uniform" = "unif",
"Log-normal" = "lnorm", "Exponential" = "exp")),
br(),
sliderInput("n","number of observations", min = 1, max = 1000, value = 500)
),
mainPanel(
tabsetPanel(
tabPanel(title = "Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
))
library(shiny)
shinyServer(function(input,output){
mydata <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
dist(input$n)
})
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
hist( mydata(), main=paste('r', dist, '(', n, ')', sep=''))
})
output$summary <- renderPrint({
summary(mydata())
}
)
output$table <- renderTable({
data.frame( x= mydata())
})
})
install.packages("maps")
install.packages("mapproj")
library(shiny)
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White" = "white",
"Percent Black" = "black",
"Percent Hispanic" = "hispanic",
"Percent Asian" = "asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
plotOutput(outputId = "selectVar")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$selectVar <- renderPlot({
percent_map(counties[,input$var],
"darkgreen",
paste0("% ", input$var),
input$range[1],
input$range[2])
})
}
}
# Run the application
shinyApp(ui = ui, server = server)
library(map)
library(mapproj)
source("census-app/helpers.R")
install.packages("fOptions")
library(shiny)
library(fOptions)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel('CRR Binomial Tree Option'),
sidebarPanel(
selectInput(inputId = "comboBox",
label = "TypeFlag",
choices = list(" European call option" = "ce", "European put option" = "pe",
"American call option" = "ca","American put option" = "pa")),
sliderInput(inputId = "pickNumber1",
label = "Time",
min = 0, max = 2, value = 1,step=0.25),
numericInput(inputId = "pickNumber2",
label = "Sigma",
min = 0, max = 1, value = .1),
numericInput(inputId = "pickNumber3",
label = "r",
min = 0, max = 1, value = .1),
numericInput(inputId = "pickNumber4",
label = "S",
min = 0, max = 10000, value = 1),
numericInput(inputId = "pickNumber5",
label = "X",
min = 0, max = 10000, value = 1),
sliderInput(inputId = "slider",
label = "n",
min = 1, max = 10, value = 2, step = 1)
),
mainPanel(
plotOutput("plotDisplay"),
textOutput("text"),
tableOutput("pricetable"))
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$plotDisplay <- renderPlot({
crr<-BinomialTreeOption(TypeFlag = input$comboBox,S=input$pickNumber4, X=input$pickNumber5,
Time=input$pickNumber1, r=input$pickNumber3, b=0, sigma=input$pickNumber2,
n=input$slider)
BinomialTreePlot(crr, dx = 0.05, dy = 0.3,
cex = 1, digits = 2,
xlim=c(1,input$slider+1.5),
ylim=c(-input$slider-1,input$slider+1),
xlab="",ylab="")
})
output$pricetable<-renderTable({
crr<-BinomialTreeOption(TypeFlag = input$comboBox,S=input$pickNumber4, X=input$pickNumber5,
Time=input$pickNumber1, r=input$pickNumber3, b=0, sigma=input$pickNumber2,
n=input$slider)
},
digits=4)
output$text<-renderText({
crr<-BinomialTreeOption(TypeFlag = input$comboBox,S=input$pickNumber4, X=input$pickNumber5,
Time=input$pickNumber1, r=input$pickNumber3, b=0, sigma=input$pickNumber2,
n=input$slider)
print(paste("the option's price is",round(crr[1,1],digits=4),sep=" "))
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("dashboardthemes")
setwd("Z:\360MoveData\Users\Administrator\Desktop\Genomics-Vis-Workshop-main\Part_1\shiny\nucleotide_frequencies")
setwd("Z:/360MoveData/Users/Administrator/Desktop/Genomics-Vis-Workshop-main/Part_1/shiny/nucleotide_frequencies")
library(shiny)
runApp()
install.packages("hash")
runApp()
runApp()
